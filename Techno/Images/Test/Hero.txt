class Hero
{
public:
	int x,y;
	int w,h;
	int countCadr;
	int UCadr;
	int JCadr;
    int CountJ;

	bool MoveL;
	bool MoveR;
	bool MoveD;
	bool MoveU;
	bool Jump;
	bool FallDown;

	char Direction;
	
	Sprite* Image;

	Sprite* ImageR[5];
	Sprite* ImageL[5];
	Sprite* ImageU[4];
	Sprite* ImageJR[4];
	Sprite* ImageJL[4];

	static int dt;
	static int timer;
	static int timer1;

	static int dtj;
	static int timerj;
	static int timerj1;

	int vel;
	int accel;
	int accelJ;

	int exitX;
	int exitY;

public:
	Hero():countCadr(0),UCadr(0),JCadr(0),MoveR(false),MoveL(false),MoveD(false),MoveU(false),FallDown(true),CountJ(0),accel(2),accelJ(5),vel(0)
	{
	Image=NULL;
	ImageR[0]=new Sprite("Images/heroR1.bmp",0xffffffff);
	ImageR[1]=new Sprite("Images/heroR2.bmp",0xffffffff);
	ImageR[2]=new Sprite("Images/heroR3.bmp",0xffffffff);
	ImageR[3]=new Sprite("Images/heroR4.bmp",0xffffffff);
	ImageR[4]=new Sprite("Images/heroR5.bmp",0xffffffff);
	
	ImageL[0]=new Sprite("Images/heroL1.bmp",0xffffffff);
	ImageL[1]=new Sprite("Images/heroL2.bmp",0xffffffff);
	ImageL[2]=new Sprite("Images/heroL3.bmp",0xffffffff);
	ImageL[3]=new Sprite("Images/heroL4.bmp",0xffffffff);
	ImageL[4]=new Sprite("Images/heroL5.bmp",0xffffffff);

	ImageU[0]=new Sprite("Images/heroU1.bmp",0xffffffff);
	ImageU[1]=new Sprite("Images/heroU2.bmp",0xffffffff);
	ImageU[2]=new Sprite("Images/heroU3.bmp",0xffffffff);
	ImageU[3]=new Sprite("Images/heroU4.bmp",0xffffffff);

	ImageJR[0]=new Sprite("Images/heroJ1.bmp",0xffffffff);
	ImageJR[1]=new Sprite("Images/heroJ2.bmp",0xffffffff);
	ImageJR[2]=new Sprite("Images/heroJ3.bmp",0xffffffff);
	ImageJR[3]=new Sprite("Images/heroJ4.bmp",0xffffffff);

	ImageJL[0]=new Sprite("Images/heroJ1.bmp",0xffffffff);
	ImageJL[1]=new Sprite("Images/heroJ2.bmp",0xffffffff);
	ImageJL[2]=new Sprite("Images/heroJ3.bmp",0xffffffff);
	ImageJL[3]=new Sprite("Images/heroJ4.bmp",0xffffffff);

	for (int i=0;i<4;i++)
	ImageJL[i]->Rotate();


	w=ImageR[0]->width;
	h=ImageR[0]->height;
	Jump=false;

	Image=ImageR[0];
	//
	exitX=0;
	exitY=0;
	}

	bool Left(int MatMap[30][40])
	{
		Direction='L';

		w=Image->width;
		h=Image->height;

	bool l=true;
	int BlockSize=20;

	int j1=x/20-2;
	int j2=(x+w)/20+2;
	int i1=y/20-2;
	int i2=(y+h)/20+2;


	for (int i=i1;i<i2;i++)
	{
	for (int j=j1;j<j2;j++)
	{
		if (MatMap[i][j]==1 || MatMap[i][j]==4 || MatMap[i][j]==6)
		{
			if (x>=BlockSize*(j+1) && x<=BlockSize*(j+1)+5 && ((y>=i*BlockSize && y<=BlockSize*(i+1)) || (y+h-2>=i*BlockSize && y+h-2<=BlockSize*(i+1))))
		{
		l=false;

		if (x-BlockSize*(j+1)>1)
		x-=(x-BlockSize*(j+1));
			}
		}
	}
	}

	return l;
	}
	bool Right(int MatMap[30][40])
	{
		Direction='R';

        w=Image->width;
		h=Image->height;

	bool r=true;
	int BlockSize=20;

	int j1=x/20-2;
	int j2=(x+w)/20+2;
	int i1=y/20-2;
	int i2=(y+h)/20+2;


	for (int i=i1;i<i2;i++)
	{
	for (int j=j1;j<j2;j++)
	{
		if (MatMap[i][j]==1 || MatMap[i][j]==4 || MatMap[i][j]==6)
		{
			if (x+w<=BlockSize*j && x+w>=BlockSize*j-5 && ((y>=i*BlockSize && y<=BlockSize*(i+1))||(y+h-2>=i*BlockSize && y+h-2<=BlockSize*(i+1))))
			{
		if (BlockSize*j-(x+w)>0)
		x+=BlockSize*j-(x+w);

		r=false;
			}
		}
	}
	}

	return r;
	}
	bool Gravitation(int MatMap[30][40])
	{
	bool g=true;
	
	if (FallDown==true)
	{
	int BlockSize=20;


	for (int i=0;i<30;i++)
	{
	for (int j=0;j<40;j++)
	{
		if (MatMap[i][j]==1 || MatMap[i][j]==3 || MatMap[i][j]==6)
		{
			if (((x>=BlockSize*j && x<=BlockSize*(j+1))||(x+w>=BlockSize*j && x+w<=BlockSize*(j+1))) && y+h<=i*BlockSize && y+h>=BlockSize*i-5)
			{
		g=false;

		if (MatMap[i][j]!=3)
		{
		if (i*BlockSize-(y+h)>1)
		y+=i*BlockSize-(y+h);
		}
			}
		}
	}
	}
	}
	else
		g=false;

	if (DOWN(MatMap)==1)
		g=false;

	return g;
	}
	bool JUMP(int MatMap[30][40])
	{
	bool j=true;

		if (DOWN(MatMap)==1 || DOWN(MatMap)==3 ||DOWN(MatMap)==6)
		j=false;
	
		return j;
	}

	void Move(char d,int MatMap[30][40])
	{
	switch(d)
	{
	case 'L':
		if (dt>3 && MoveL==true && Left(MatMap)==true)
		{
		if (countCadr<4)
		countCadr++;
		else
			countCadr=0;
		
		Image=ImageL[countCadr];
		x-=5;

    	timer1=0;
	    dt=0;
    	MoveL=false;
		}
		break;

	case 'R':
	if (dt>3 && MoveR==true && Right(MatMap)==true)
	{
			if (countCadr<4)
		countCadr++;
		else
			countCadr=0;
		
		Image=ImageR[countCadr];


	x+=5;


	timer1=0;
	dt=0;
	MoveR=false;
	}
	break;
	

	case 'D':
		if (dt>10 && MoveD==true)
		{
		ChangeImageU();

		y+=5;

	    timer1=0;
	    dt=0;
	   MoveD=false;
		}
		break;


	case 'U':
		if (dt>10 && MoveU==true)
	   {
		 y-=5;
		
		ChangeImageU();

	//++++
	int mapX=x/20;
	int mapY=y/20;

	int mapY1=(y+Image->height)/20;

	if (MatMap[mapY][mapX]==0 && MatMap[mapY1][mapX]==3 && MoveD==false)
	{
		Image=ImageR[0];
		countCadr=0;
		y=(mapY+1)*20-Image->height;
	}
	//++++
	
	timer1=0;
	dt=0;
	MoveU=false;

	if (UP(MatMap)!=3)
		FallDown=true;
	}
		break;
	}
	
	}
	void MoveUD(char d,int MatMap[30][40])
	{
   switch(d)
	{
	case 'G':
	if (dt>5 && Jump==false && Gravitation(MatMap)==true)
	{
		if (vel<30)
		vel+=accel;

		int some=(y+vel+Image->height)/20;
		
		if (MatMap[some][x/20]==0)
		y+=vel;
		else
		{
			y=(some)*20-Image->height;
			vel=0;
		}
		
		timer1=0;
		dt=0;
	}
	break;

	case 'J':
	if (UP(MatMap)==1 || UP(MatMap)==3 || UP(MatMap)==6)
	{
		JCadr=0;
		CountJ=0;
		Jump=false;
	}

	if (dtj>5 && Jump==true)
	{
		if (JCadr!=3)
		{
		ChangeImageJ();
		vel=20;
		}

		if (JCadr==3)
		{
			vel-=accelJ;
			y-=vel;
			CountJ++;

			if (CountJ>4)
			{
			CountJ=0;
			JCadr=0;
			vel=0;
			Jump=false;
			}

		}
			timerj1=0;
			dtj=0;
	}
		break;
	}
	
	}

	int UP(int MatMap[30][40])
	{
	int block=0;

	int mapX=x/20;
	int mapY=y/20;

	block=MatMap[mapY][mapX];

	return block;
	}
    int DOWN(int MatMap[30][40])
	{
	int block=0;

	int mapX=x/20;
	int mapY=(y+Image->height)/20;

	block=MatMap[mapY][mapX];

	return block;
	}

	void ChangeImageU()
	{
		if (UCadr<3)
		UCadr++;
		else
			UCadr=0;

		Image=ImageU[UCadr];
	}
	void ChangeImageJ()
	{
		if (JCadr<3)
		JCadr++;
		else
			JCadr=0;


		if (Direction=='R')
		Image=ImageJR[JCadr];

		if (Direction=='L')
		Image=ImageJL[JCadr];
	}
	
	void Draw(D3DLOCKED_RECT rectangle,RECT rectSize,IDirect3DSurface9* backBuffer)
	{
	 rectSize.left =x;
     rectSize.top =y;
	 rectSize.right = rectSize.left+Image->width;
	 rectSize.bottom =rectSize.top+ Image->height;

	 backBuffer->LockRect(&rectangle,&rectSize,0);		
	 Image->DrawIntObject(rectangle);
	 backBuffer->UnlockRect();
	}
	static void Timer()
	{
	if (timer1 == 0)
				timer1 = timeGetTime();

			timer = timeGetTime();
			dt = timer - timer1;
	}
	static void TimerJ()
	{
	if (timerj1 == 0)
				timerj1 = timeGetTime();

			timerj = timeGetTime();
			dtj = timerj - timerj1;
	}

	bool ChangeLevel()
	{
		bool c=false;

	if (x>=exitX && x<=exitX+5 && y>=exitY && y<=exitY+5)
		c=true;

	if (x+Image->width>=exitX && x+Image->width<=exitX+5 && y>=exitY && y<=exitY+5)
		c=true;

		return c;
	}
};
 int Hero::dt=0;
int Hero::timer=0;
int Hero::timer1=0;

int Hero::dtj=0;
int Hero::timerj=0;
int Hero::timerj1=0;
